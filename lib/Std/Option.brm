type OPTION = interface
    extends @enum interface
        type t a

        val Some : pi a => a -> t a
        val None : pi a => t a
    end

    val pure : pi a => t a
    val map : pi a b => (a -> b) -> t a -> t b
    val apply : pi a b => t (a -> b) -> t a -> t b
    val flatMap : pi a b => (a -> t b) -> t a -> t b
end

val Option : OPTION = module
    extends @enum module
        type t a

        val Some : pi a => a -> t a
        val None : pi a => t a
    end

    val pure = Some

    fun map f = fn match
    | Some v -> Some (f v)
    | None -> None
    end

    val apply = fn match
    | Some f -> fn
        | Some v -> Some (f v)
        |Â None -> None
        end
    | None -> Fn.const None
    end

    fun flatMap f = fn match
    | Some v -> f v
    | None -> None
    end
end

