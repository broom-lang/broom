type OPTION = {|
    extends enum {|
        type t a;

        Some : a => a -> t a;
        None : a => t a;
    };

    pure : a => a -> t a;
    map :  (a, b, e) => ((a -!e-> b), t a) -!e-> t b;
    apply : (a, b, e) => (t (a -!e-> b), t a) -!e-> t b;
    flatMap : (a, b, e) => ((a -!e-> t b), t a) -!e-> t b;
};

Option : OPTION = {
    extends enum {
        type t a;

        Some : a => a -> t a;
        None : a => t a;
    };

    pure = Some;

    fun map f = [
    | Some v -> Some (f v)
    | None -> None
    ];

    apply = [
    | Some f -> [
        | Some v -> Some (f v)
        |Â None -> None
        ]
    | None -> Fn.const None
    ];

    fun flatMap f = [
    | Some v -> f v
    | None -> None
    ];
};

