val State : interface
    extends effect interface
        val Get : pi s => {:} -> s
        val Set : pi s => s -> {:}
    end

    val run : pi e s a => ({:} -> ! (e with State : t s) v) -> s -> ({:} -> ! e {state : s, value : v})
    val eval : pi e s a => ({:} -> ! (e with State : t s) v) -> s -> ({:} -> ! e v)
    val run : pi e s a => ({:} -> ! (e with State : t s) v) -> s -> ({:} -> ! e s)
end = module
    extends effect module
        val Get : pi s => {:} -> s
        val Set : pi s => s -> {:}
    end

    fun run thunk state ->
        match thunk {}
        |Â value ->
            fn state -> {state, value} end
        | effect ('State (Get {})) k ->
            fn state -> k state state end
        |Â effect ('State (Set state)) k ->
            fn _ -> k {} state end
        end

    fun eval thunk state = (run thunk state).value

    fun exec thunk state = (run thunk state).state
end

