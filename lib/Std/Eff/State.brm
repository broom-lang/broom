State : {:
    extends effect {:
        Get : s => s;
        Set : s => s -> (:);
    };

    type eff s = (|State : t s);

    run : (e \ State, s, a) => (:((:) -! e with eff s -> v), s) -!e-> {state : s; value : v};
    eval : (e \ State, s, a) => (:((:) -! e with eff s -> v), s) -!e-> v;
    exec : (e \ State, s, a) => (:((:) -! e with eff s -> v), s) -!e-> s;
} = {
    extends effect {
        Get : s => s;
        Set : s => s -> (:);
    };
    -- = {
    --     # type request v r = {|type response = r; request : v};
    --     Get : s => {|type response = s; request : {|}} =
    --         [| s => [|request -> 'Get {response = s; request}]];
    --     Set : s => s -> {|type response = {|}; request : s} =
    --         [| s => [| state -> 'Set {response = {|}, request = state} ]];
    -- } ?

    type eff s = (|State : t s);

    fun run thunk state = match (thunk ()) {
    |Â value -> {| state -> {state, value}}
    | effect (`State 'Get) k -> {| state -> (k state) state}
    |Â effect (`State ('Set state)) k -> {| _ -> k ! state }
    };

    fun eval thunk state = (run thunk state).value;

    fun exec thunk state = (run thunk state).state;
};

