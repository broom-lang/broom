%name BroomLexer;

%defs (
    structure Tokens = BroomTokens
    type lex_result = Tokens.token
    fun eof () = Tokens.EOF
);

%let alpha = [a-zA-Z];
%let digit = [0-9];
%let firstConstituent = {alpha};
%let constituent = {firstConstituent} | _ | {digit} | ';

val       => (Tokens.VAL);
fun       => (Tokens.FUN);
type      => (Tokens.TYPE);
pi        => (Tokens.PI);
begin     => (Tokens.BEGIN);
do        => (Tokens.DO);
extends   => (Tokens.EXTENDS);
module    => (Tokens.MODULE);
interface => (Tokens.INTERFACE);
override  => (Tokens.OVERRIDE);
exclude   => (Tokens.EXCLUDE);
fn        => (Tokens.FN);
match     => (Tokens.MATCH);
end       => (Tokens.END);
with      => (Tokens.WITH);
where     => (Tokens.WHERE);
without   => (Tokens.WITHOUT);

"=>" => (Tokens.DARROW);
"="  => (Tokens.EQ);
"->" => (Tokens.ARROW);
"~>" => (Tokens.WARROW);
"|"  => (Tokens.BAR);
"&"  => (Tokens.AMP);
".." => (Tokens.DDOT);
"."  => (Tokens.DOT);
","  => (Tokens.COMMA);
:    => (Tokens.COLON);
";"  => (Tokens.SEMI);

"==" => (Tokens.OP4 (Name.fromString yytext));
"<" | "<=" | ">=" | ">" => (Tokens.OP5 (Name.fromString yytext));
"+" | "-" => (Tokens.OP6 (Name.fromString yytext));
"*" | "/" => (Tokens.OP7 (Name.fromString yytext));

"(" => (Tokens.LPAREN);
")" => (Tokens.RPAREN);
"[" => (Tokens.LBRACKET);
"]" => (Tokens.RBRACKET);
"{" => (Tokens.LBRACE);
"}" => (Tokens.RBRACE);

{digit}+ => (Tokens.INT (valOf (Int.fromString yytext)));
True     => (Tokens.BOOL true);
False    => (Tokens.BOOL false);

@ {constituent}+                  => (Tokens.META (Name.fromString (String.extract (yytext, 1, NONE))));
__ {constituent}+                 => (Tokens.INTRINSIC (valOf (Primop.fromString yytext)));
_                                 => (Tokens.WILDCARD);
{firstConstituent} {constituent}* => (Tokens.ID (Name.fromString yytext));

# [^\n]*           => (continue ());
" " | \n | \r | \t => (continue ());

