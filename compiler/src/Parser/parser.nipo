parser BroomParser where

{ open BroomTokens }

token {BroomTokens.t}
    = Val 'val'
    | Fun 'fun'
    | Type 'type'
    | Interface 'interface'
    | End 'end'
    | Eq '='
    | Arrow '->'
    | Amp '&'
    | Colon ':'
    | LBrace '{'
    | RBrace '}'
    | LParen '('
    | RParen ')'
    | Id
    | Int
    | Bool
    ;

rules

# Statements

start stmts = stmts=stmt* { stmts };

stmt
    = 'val' Id typ? '=' expr
    | 'type' Id '=' expr
    ;

# Expressions

expr
    = atom
    ;

atom
    = Id
    | const
    ;

const
    = Int
    | Bool
    ;

# Types

typ
    = 'fun' Id (':' nestableTyp)? '->' typ
    | nonArrowTyp ('->' typ)?
    ;

nonArrowTyp
    = purelyTyp
    | '(' typ ')'
    | expr
    ;

nestableTyp
    = purelyTyp
    | '(' typ ')'
    ;

purelyTyp
    = 'type'
    | '{' rowType '}'
    | '(' '=' expr ')'
    | 'interface' decls=decl* 'end'
    ;

rowType
    = ':'
    | fields=rowField* ext=('&' typ)
    ;

rowField = Id ':' typ ;

decl
    = 'val' Id ':' typ
    | 'type' Id ('=' typ)?
    ;

